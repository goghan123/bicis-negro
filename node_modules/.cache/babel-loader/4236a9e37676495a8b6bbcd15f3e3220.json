{"ast":null,"code":"import React from 'react';\nexport const TotalAmountContext = /*#__PURE__*/React.createContext({\n  carterTotalAmount: '',\n  setTotalAmount: () => {}\n});\nexport const CartContentContext = /*#__PURE__*/React.createContext({\n  cartContent: '',\n  setCartContent: () => {}\n});\n\nconst refGenerator = () => {\n  let randoms = [];\n\n  for (let i = 0; i < 10; i++) {\n    function findCoincidence() {\n      const newRandom = Math.round(1008000 * 132 * Math.random());\n      const coincidenceFound = randoms.find(el => el === newRandom);\n\n      try {\n        typeof coincidenceFound != 'undefined' ? findCoincidence() : randoms = [...randoms, newRandom];\n      } catch (e) {\n        console.log('Error interno GH1');\n        console.log(e);\n      }\n    }\n\n    findCoincidence();\n  }\n\n  const values = randoms;\n  return values;\n};\n\nexport const createCartContentObject = keys => {\n  const newEntries = keys.map(key => [key, 0]);\n  const newObject = Object.fromEntries(newEntries);\n  return newObject;\n};\nexport const getCartContent = () => {\n  let cartContent = {};\n\n  const returnNewReferences = () => {\n    const references = refGenerator();\n    cartContent = createCartContentObject(references);\n    sessionStorage.setItem('cart-content', JSON.stringify(cartContent));\n  };\n\n  const returnOldReferences = () => {\n    cartContent = JSON.parse(sessionStorage.getItem('cart-content'));\n  };\n\n  sessionStorage.getItem('cart-content') ? returnOldReferences() : returnNewReferences();\n  return cartContent;\n};","map":{"version":3,"sources":["C:/Users/User/Desktop/NicolÃ¡s/Rafaela/my-app/client/src/elements/cartContent.js"],"names":["React","TotalAmountContext","createContext","carterTotalAmount","setTotalAmount","CartContentContext","cartContent","setCartContent","refGenerator","randoms","i","findCoincidence","newRandom","Math","round","random","coincidenceFound","find","el","e","console","log","values","createCartContentObject","keys","newEntries","map","key","newObject","Object","fromEntries","getCartContent","returnNewReferences","references","sessionStorage","setItem","JSON","stringify","returnOldReferences","parse","getItem"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,OAAO,MAAMC,kBAAkB,gBAAGD,KAAK,CAACE,aAAN,CAAoB;AAClDC,EAAAA,iBAAiB,EAAE,EAD+B;AAElDC,EAAAA,cAAc,EAAE,MAAM,CAAG;AAFyB,CAApB,CAA3B;AAKP,OAAO,MAAMC,kBAAkB,gBAAGL,KAAK,CAACE,aAAN,CAAoB;AAClDI,EAAAA,WAAW,EAAE,EADqC;AAElDC,EAAAA,cAAc,EAAE,MAAM,CAAG;AAFyB,CAApB,CAA3B;;AAKP,MAAMC,YAAY,GAAG,MAAM;AACvB,MAAIC,OAAO,GAAG,EAAd;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,EAApB,EAAwBA,CAAC,EAAzB,EAA6B;AACzB,aAASC,eAAT,GAA2B;AACvB,YAAMC,SAAS,GAAGC,IAAI,CAACC,KAAL,CAAW,UAAU,GAAV,GAAgBD,IAAI,CAACE,MAAL,EAA3B,CAAlB;AACA,YAAMC,gBAAgB,GAAGP,OAAO,CAACQ,IAAR,CAAaC,EAAE,IAAIA,EAAE,KAAKN,SAA1B,CAAzB;;AACA,UAAI;AACA,eAAOI,gBAAP,IAA2B,WAA3B,GACIL,eAAe,EADnB,GACwBF,OAAO,GAAG,CAAC,GAAGA,OAAJ,EAAaG,SAAb,CADlC;AAEH,OAHD,CAGE,OAAOO,CAAP,EAAU;AACRC,QAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ;AACAD,QAAAA,OAAO,CAACC,GAAR,CAAYF,CAAZ;AACH;AACJ;;AACDR,IAAAA,eAAe;AAClB;;AACD,QAAMW,MAAM,GAAGb,OAAf;AACA,SAAOa,MAAP;AACH,CAlBD;;AAoBA,OAAO,MAAMC,uBAAuB,GAAIC,IAAD,IAAU;AAC7C,QAAMC,UAAU,GAAGD,IAAI,CAACE,GAAL,CAAUC,GAAD,IAAS,CAACA,GAAD,EAAM,CAAN,CAAlB,CAAnB;AACA,QAAMC,SAAS,GAAGC,MAAM,CAACC,WAAP,CAAmBL,UAAnB,CAAlB;AACA,SAAOG,SAAP;AACH,CAJM;AAMP,OAAO,MAAMG,cAAc,GAAG,MAAM;AAChC,MAAIzB,WAAW,GAAG,EAAlB;;AACA,QAAM0B,mBAAmB,GAAG,MAAM;AAC9B,UAAMC,UAAU,GAAGzB,YAAY,EAA/B;AACAF,IAAAA,WAAW,GAAGiB,uBAAuB,CAACU,UAAD,CAArC;AACAC,IAAAA,cAAc,CAACC,OAAf,CAAuB,cAAvB,EAAuCC,IAAI,CAACC,SAAL,CAAe/B,WAAf,CAAvC;AACH,GAJD;;AAKA,QAAMgC,mBAAmB,GAAG,MAAM;AAC9BhC,IAAAA,WAAW,GAAG8B,IAAI,CAACG,KAAL,CAAWL,cAAc,CAACM,OAAf,CAAuB,cAAvB,CAAX,CAAd;AACH,GAFD;;AAGAN,EAAAA,cAAc,CAACM,OAAf,CAAuB,cAAvB,IACIF,mBAAmB,EADvB,GAEIN,mBAAmB,EAFvB;AAGA,SAAO1B,WAAP;AACH,CAdM","sourcesContent":["import React from 'react';\r\n\r\nexport const TotalAmountContext = React.createContext({\r\n    carterTotalAmount: '',\r\n    setTotalAmount: () => { }\r\n});\r\n\r\nexport const CartContentContext = React.createContext({\r\n    cartContent: '',\r\n    setCartContent: () => { }\r\n});\r\n\r\nconst refGenerator = () => {\r\n    let randoms = [];\r\n    for (let i = 0; i < 10; i++) {\r\n        function findCoincidence() {\r\n            const newRandom = Math.round(1008000 * 132 * Math.random());\r\n            const coincidenceFound = randoms.find(el => el === newRandom);\r\n            try {\r\n                typeof coincidenceFound != 'undefined' ?\r\n                    findCoincidence() : randoms = [...randoms, newRandom];\r\n            } catch (e) {\r\n                console.log('Error interno GH1')\r\n                console.log(e);\r\n            }\r\n        }\r\n        findCoincidence();\r\n    }\r\n    const values = randoms;\r\n    return values;\r\n}\r\n\r\nexport const createCartContentObject = (keys) => {\r\n    const newEntries = keys.map((key) => [key, 0]);\r\n    const newObject = Object.fromEntries(newEntries);\r\n    return newObject;\r\n}\r\n\r\nexport const getCartContent = () => {\r\n    let cartContent = {};\r\n    const returnNewReferences = () => {\r\n        const references = refGenerator();\r\n        cartContent = createCartContentObject(references);\r\n        sessionStorage.setItem('cart-content', JSON.stringify(cartContent));\r\n    }\r\n    const returnOldReferences = () => {\r\n        cartContent = JSON.parse(sessionStorage.getItem('cart-content'));\r\n    }\r\n    sessionStorage.getItem('cart-content') ?\r\n        returnOldReferences() :\r\n        returnNewReferences();\r\n    return cartContent;\r\n}\r\n"]},"metadata":{},"sourceType":"module"}