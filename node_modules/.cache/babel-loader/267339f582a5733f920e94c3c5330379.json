{"ast":null,"code":"import React from 'react'; // export const TotalAmountContext = React.createContext({\n//     useCartAmount\n// });\n\nexport const TotalAmountContext = /*#__PURE__*/React.createContext({\n  carterTotalAmount: '',\n  setTotalAmount: () => {}\n});\nexport function storeInSessiontorage(amount) {\n  sessionStorage.setItem('cart-amount', amount);\n}\nexport const CartContentContext = /*#__PURE__*/React.createContext({\n  cartContent: '',\n  setCartContent: () => {}\n});\n\nconst refGenerator = () => {\n  let randoms = [];\n\n  for (let i = 0; i < 10; i++) {\n    function findCoincidence() {\n      const newRandom = Math.round(1008000 * 132 * Math.random());\n      const coincidenceFound = randoms.find(el => el === newRandom);\n\n      try {\n        typeof coincidenceFound != 'undefined' ? findCoincidence() : randoms = [...randoms, newRandom];\n      } catch (e) {\n        console.log('Error interno GH1');\n        console.log(e);\n      }\n    }\n\n    findCoincidence();\n  }\n\n  const values = randoms;\n  return values;\n}; // const newRefs = () => {\n//     const getRefs = refGenerator();\n//     sessionStorage.setItem('cart-content', JSON.stringify(getRefs));\n//     return getRefs;\n// }\n\n\nexport const provideRef = () => {\n  sessionStorage.setItem('carta', 'hola');\n  const previouslyExistentCart = sessionStorage.getItem('cart-content'); // console.log(previouslyExistentCart);\n  // return typeof previouslyExistentCart === 'null' ?\n  //     // refGenerator() :\n  //     // previouslyExistentCart;\n  //     'Positivo' :\n  //     'Negativo';\n\n  return 'caballo loco';\n}; // const useTotalAmount = () => {\n//     const [carterTotalAmount, setTotalAmount] = useState(0);\n//     const utilitiesSet = useMemo(\n//         () => ({ carterTotalAmount, setTotalAmount }),\n//         [carterTotalAmount]\n//     );\n//     return utilitiesSet;\n// }\n// export const TotalAmountContext = () => {\n//     const [carterTotalAmount, setTotalAmount] = useState(0);\n//     const utilitiesSet = useMemo(\n//         () => ({ carterTotalAmount, setTotalAmount }),\n//         [carterTotalAmount]\n//     );\n//     return React.createContext(\n//         { utilitiesSet }\n//     );\n// }","map":{"version":3,"sources":["C:/Users/User/Desktop/NicolÃ¡s/Rafaela/my-app/client/src/components/CartContext.js"],"names":["React","TotalAmountContext","createContext","carterTotalAmount","setTotalAmount","storeInSessiontorage","amount","sessionStorage","setItem","CartContentContext","cartContent","setCartContent","refGenerator","randoms","i","findCoincidence","newRandom","Math","round","random","coincidenceFound","find","el","e","console","log","values","provideRef","previouslyExistentCart","getItem"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB,C,CAGA;AACA;AACA;;AAGA,OAAO,MAAMC,kBAAkB,gBAAGD,KAAK,CAACE,aAAN,CAAoB;AAClDC,EAAAA,iBAAiB,EAAE,EAD+B;AAElDC,EAAAA,cAAc,EAAE,MAAM,CAAG;AAFyB,CAApB,CAA3B;AAKP,OAAO,SAASC,oBAAT,CAA8BC,MAA9B,EAAsC;AACzCC,EAAAA,cAAc,CAACC,OAAf,CAAuB,aAAvB,EAAsCF,MAAtC;AACH;AAED,OAAO,MAAMG,kBAAkB,gBAAGT,KAAK,CAACE,aAAN,CAAoB;AAClDQ,EAAAA,WAAW,EAAE,EADqC;AAElDC,EAAAA,cAAc,EAAE,MAAM,CAAG;AAFyB,CAApB,CAA3B;;AAKP,MAAMC,YAAY,GAAG,MAAM;AACvB,MAAIC,OAAO,GAAG,EAAd;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,EAApB,EAAwBA,CAAC,EAAzB,EAA6B;AACzB,aAASC,eAAT,GAA2B;AACvB,YAAMC,SAAS,GAAGC,IAAI,CAACC,KAAL,CAAW,UAAU,GAAV,GAAgBD,IAAI,CAACE,MAAL,EAA3B,CAAlB;AACA,YAAMC,gBAAgB,GAAGP,OAAO,CAACQ,IAAR,CAAaC,EAAE,IAAIA,EAAE,KAAKN,SAA1B,CAAzB;;AACA,UAAI;AACA,eAAOI,gBAAP,IAA2B,WAA3B,GACIL,eAAe,EADnB,GACwBF,OAAO,GAAG,CAAC,GAAGA,OAAJ,EAAaG,SAAb,CADlC;AAEH,OAHD,CAGE,OAAOO,CAAP,EAAU;AACRC,QAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ;AACAD,QAAAA,OAAO,CAACC,GAAR,CAAYF,CAAZ;AACH;AACJ;;AACDR,IAAAA,eAAe;AAClB;;AACD,QAAMW,MAAM,GAAGb,OAAf;AACA,SAAOa,MAAP;AACH,CAlBD,C,CAoBA;AACA;AACA;AACA;AACA;;;AAEA,OAAO,MAAMC,UAAU,GAAG,MAAM;AAC5BpB,EAAAA,cAAc,CAACC,OAAf,CAAuB,OAAvB,EAAgC,MAAhC;AACA,QAAMoB,sBAAsB,GAAGrB,cAAc,CAACsB,OAAf,CAAuB,cAAvB,CAA/B,CAF4B,CAG5B;AACA;AACA;AACA;AACA;AACA;;AACA,SAAO,cAAP;AACH,CAVM,C,CAYP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import React from 'react';\r\n\r\n\r\n// export const TotalAmountContext = React.createContext({\r\n//     useCartAmount\r\n// });\r\n\r\n\r\nexport const TotalAmountContext = React.createContext({\r\n    carterTotalAmount: '',\r\n    setTotalAmount: () => { }\r\n});\r\n\r\nexport function storeInSessiontorage(amount) {\r\n    sessionStorage.setItem('cart-amount', amount);\r\n}\r\n\r\nexport const CartContentContext = React.createContext({\r\n    cartContent: '',\r\n    setCartContent: () => { }\r\n});\r\n\r\nconst refGenerator = () => {\r\n    let randoms = [];\r\n    for (let i = 0; i < 10; i++) {\r\n        function findCoincidence() {\r\n            const newRandom = Math.round(1008000 * 132 * Math.random());\r\n            const coincidenceFound = randoms.find(el => el === newRandom);\r\n            try {\r\n                typeof coincidenceFound != 'undefined' ?\r\n                    findCoincidence() : randoms = [...randoms, newRandom];\r\n            } catch (e) {\r\n                console.log('Error interno GH1')\r\n                console.log(e);\r\n            }\r\n        }\r\n        findCoincidence();\r\n    }\r\n    const values = randoms;\r\n    return values;\r\n}\r\n\r\n// const newRefs = () => {\r\n//     const getRefs = refGenerator();\r\n//     sessionStorage.setItem('cart-content', JSON.stringify(getRefs));\r\n//     return getRefs;\r\n// }\r\n\r\nexport const provideRef = () => {\r\n    sessionStorage.setItem('carta', 'hola');\r\n    const previouslyExistentCart = sessionStorage.getItem('cart-content');\r\n    // console.log(previouslyExistentCart);\r\n    // return typeof previouslyExistentCart === 'null' ?\r\n    //     // refGenerator() :\r\n    //     // previouslyExistentCart;\r\n    //     'Positivo' :\r\n    //     'Negativo';\r\n    return 'caballo loco';\r\n}\r\n\r\n// const useTotalAmount = () => {\r\n//     const [carterTotalAmount, setTotalAmount] = useState(0);\r\n//     const utilitiesSet = useMemo(\r\n//         () => ({ carterTotalAmount, setTotalAmount }),\r\n//         [carterTotalAmount]\r\n//     );\r\n//     return utilitiesSet;\r\n// }\r\n\r\n// export const TotalAmountContext = () => {\r\n//     const [carterTotalAmount, setTotalAmount] = useState(0);\r\n//     const utilitiesSet = useMemo(\r\n//         () => ({ carterTotalAmount, setTotalAmount }),\r\n//         [carterTotalAmount]\r\n//     );\r\n//     return React.createContext(\r\n//         { utilitiesSet }\r\n//     );\r\n// }"]},"metadata":{},"sourceType":"module"}