{"ast":null,"code":"import React from 'react'; // export const TotalAmountContext = React.createContext({\n//     useCartAmount\n// });\n\nexport const TotalAmountContext = /*#__PURE__*/React.createContext({\n  carterTotalAmount: '',\n  setTotalAmount: () => {}\n});\nexport function storeInSessiontorage(amount) {\n  sessionStorage.setItem('cart-amount', amount);\n}\nexport const CartContentContext = /*#__PURE__*/React.createContext({\n  cartContent: '',\n  setCartContent: () => {}\n});\n\nconst refGenerator = () => {\n  let randoms = [];\n\n  for (let i = 0; i < 10; i++) {\n    function findCoincidence() {\n      const newRandom = Math.round(1008000 * 132 * Math.random());\n      const coincidenceFound = randoms.find(el => el === newRandom);\n\n      try {\n        typeof coincidenceFound != 'undefined' ? findCoincidence() : randoms = [...randoms, newRandom];\n      } catch (e) {\n        console.log('Error interno GH1');\n        console.log(e);\n      }\n    }\n\n    findCoincidence();\n  }\n\n  const values = randoms;\n  return values;\n};\n\nconst createCartContentObject = keys => {\n  // const entries = new Map([\n  //     keys.map((key) => [key, ''])\n  // ]);\n  const newEntries = keys.map(key => [key, 0]);\n  const newObject = Object.fromEntries(newEntries);\n  return newObject;\n};\n\nexport const getReferences = () => {\n  let references = [];\n  let cartContent = {};\n\n  const returnNewReferences = () => {\n    references = refGenerator();\n    cartContent = createCartContentObject(references);\n    sessionStorage.setItem('cart-content', JSON.stringify(cartContent));\n  };\n\n  const returnOldReferences = () => {\n    cartContent = JSON.parse(sessionStorage.getItem('cart-content')); // console.log(cartContent);\n    // references = Object.keys(cartContent);\n    // console.log(references);\n    // refs = refs.replace('{', '');\n    // refs = refs.replace(\"[\", '');\n    // refs = refs.replace(\"]\", '');\n    // refs = refs.split(',');\n    // refs = refs.map(Number);\n    // refs = refs.replace(\"[\", '')\n    //     .replace(\"]\", '')\n    //     .split(',')\n    //     .map(Number);\n  };\n\n  sessionStorage.getItem('cart-content') ? returnOldReferences() : returnNewReferences(); // console.log(references);\n\n  return cartContent;\n}; // function funcionDePrueba() {\n//     sessionStorage.setItem('cart-content', 'hola');\n//     return 'Positivo';\n// }\n// export const provideRef = () => {\n//     const previouslyExistentCart = sessionStorage.getItem('cart-content');\n//     return typeof previouslyExistentCart === 'undefined' ?\n//         // refGenerator() :\n//         // previouslyExistentCart;\n//         'Positivo' :\n//         'Negativo';\n//     // return 'caballo loco';\n// }\n// const useTotalAmount = () => {\n//     const [carterTotalAmount, setTotalAmount] = useState(0);\n//     const utilitiesSet = useMemo(\n//         () => ({ carterTotalAmount, setTotalAmount }),\n//         [carterTotalAmount]\n//     );\n//     return utilitiesSet;\n// }\n// export const TotalAmountContext = () => {\n//     const [carterTotalAmount, setTotalAmount] = useState(0);\n//     const utilitiesSet = useMemo(\n//         () => ({ carterTotalAmount, setTotalAmount }),\n//         [carterTotalAmount]\n//     );\n//     return React.createContext(\n//         { utilitiesSet }\n//     );\n// }","map":{"version":3,"sources":["C:/Users/User/Desktop/NicolÃ¡s/Rafaela/my-app/client/src/components/CartContent.js"],"names":["React","TotalAmountContext","createContext","carterTotalAmount","setTotalAmount","storeInSessiontorage","amount","sessionStorage","setItem","CartContentContext","cartContent","setCartContent","refGenerator","randoms","i","findCoincidence","newRandom","Math","round","random","coincidenceFound","find","el","e","console","log","values","createCartContentObject","keys","newEntries","map","key","newObject","Object","fromEntries","getReferences","references","returnNewReferences","JSON","stringify","returnOldReferences","parse","getItem"],"mappings":"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","sourcesContent":["import React from 'react';\r\n\r\n\r\n// export const TotalAmountContext = React.createContext({\r\n//     useCartAmount\r\n// });\r\n\r\n\r\nexport const TotalAmountContext = React.createContext({\r\n    carterTotalAmount: '',\r\n    setTotalAmount: () => { }\r\n});\r\n\r\nexport function storeInSessiontorage(amount) {\r\n    sessionStorage.setItem('cart-amount', amount);\r\n}\r\n\r\nexport const CartContentContext = React.createContext({\r\n    cartContent: '',\r\n    setCartContent: () => { }\r\n});\r\n\r\nconst refGenerator = () => {\r\n    let randoms = [];\r\n    for (let i = 0; i < 10; i++) {\r\n        function findCoincidence() {\r\n            const newRandom = Math.round(1008000 * 132 * Math.random());\r\n            const coincidenceFound = randoms.find(el => el === newRandom);\r\n            try {\r\n                typeof coincidenceFound != 'undefined' ?\r\n                    findCoincidence() : randoms = [...randoms, newRandom];\r\n            } catch (e) {\r\n                console.log('Error interno GH1')\r\n                console.log(e);\r\n            }\r\n        }\r\n        findCoincidence();\r\n    }\r\n    const values = randoms;\r\n    return values;\r\n}\r\n\r\nconst createCartContentObject = (keys) => {\r\n    // const entries = new Map([\r\n    //     keys.map((key) => [key, ''])\r\n    // ]);\r\n    const newEntries = keys.map((key) => [key, 0]);\r\n    const newObject = Object.fromEntries(newEntries);\r\n    return newObject;\r\n}\r\n\r\nexport const getReferences = () => {\r\n    let references = [];\r\n    let cartContent = {};\r\n    const returnNewReferences = () => {\r\n        references = refGenerator();\r\n        cartContent = createCartContentObject(references);\r\n        sessionStorage.setItem('cart-content', JSON.stringify(cartContent));\r\n    }\r\n    const returnOldReferences = () => {\r\n        cartContent = JSON.parse(sessionStorage.getItem('cart-content'));\r\n        // console.log(cartContent);\r\n        // references = Object.keys(cartContent);\r\n        // console.log(references);\r\n        // refs = refs.replace('{', '');\r\n        // refs = refs.replace(\"[\", '');\r\n        // refs = refs.replace(\"]\", '');\r\n        // refs = refs.split(',');\r\n        // refs = refs.map(Number);\r\n\r\n\r\n        // refs = refs.replace(\"[\", '')\r\n        //     .replace(\"]\", '')\r\n        //     .split(',')\r\n        //     .map(Number);\r\n    }\r\n    sessionStorage.getItem('cart-content') ?\r\n        returnOldReferences() :\r\n        returnNewReferences();\r\n    // console.log(references);\r\n    return cartContent;\r\n}\r\n\r\n// function funcionDePrueba() {\r\n//     sessionStorage.setItem('cart-content', 'hola');\r\n//     return 'Positivo';\r\n// }\r\n\r\n// export const provideRef = () => {\r\n//     const previouslyExistentCart = sessionStorage.getItem('cart-content');\r\n//     return typeof previouslyExistentCart === 'undefined' ?\r\n//         // refGenerator() :\r\n//         // previouslyExistentCart;\r\n//         'Positivo' :\r\n//         'Negativo';\r\n//     // return 'caballo loco';\r\n// }\r\n\r\n// const useTotalAmount = () => {\r\n//     const [carterTotalAmount, setTotalAmount] = useState(0);\r\n//     const utilitiesSet = useMemo(\r\n//         () => ({ carterTotalAmount, setTotalAmount }),\r\n//         [carterTotalAmount]\r\n//     );\r\n//     return utilitiesSet;\r\n// }\r\n\r\n// export const TotalAmountContext = () => {\r\n//     const [carterTotalAmount, setTotalAmount] = useState(0);\r\n//     const utilitiesSet = useMemo(\r\n//         () => ({ carterTotalAmount, setTotalAmount }),\r\n//         [carterTotalAmount]\r\n//     );\r\n//     return React.createContext(\r\n//         { utilitiesSet }\r\n//     );\r\n// }"]},"metadata":{},"sourceType":"module"}