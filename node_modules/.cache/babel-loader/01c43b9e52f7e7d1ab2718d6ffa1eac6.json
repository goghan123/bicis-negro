{"ast":null,"code":"import _toConsumableArray from\"C:/Users/Nautilus/Desktop/Nico/Rafaela/my-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";import React from'react';export var TotalAmountContext=/*#__PURE__*/React.createContext({carterTotalAmount:'',setTotalAmount:function setTotalAmount(){}});export var CartContentContext=/*#__PURE__*/React.createContext({cartContent:'',setCartContent:function setCartContent(){}});var refGenerator=function refGenerator(){var randoms=[];var _loop=function _loop(i){function findCoincidence(){var newRandom=Math.round(1008000*132*Math.random());var coincidenceFound=randoms.find(function(el){return el===newRandom;});try{typeof coincidenceFound!='undefined'?findCoincidence():randoms=[].concat(_toConsumableArray(randoms),[newRandom]);}catch(e){console.log('Error GH1');console.log(e);}}findCoincidence();};for(var i=0;i<10;i++){_loop(i);}var values=randoms;return values;};export var createCartContentObject=function createCartContentObject(keys){var newEntries=keys.map(function(key){return[key,0];});var newObject=Object.fromEntries(newEntries);return newObject;};export var getCartContent=function getCartContent(){var cartContent={};var returnNewReferences=function returnNewReferences(){var references=refGenerator();cartContent=createCartContentObject(references);sessionStorage.setItem('cart-content',JSON.stringify(cartContent));};var returnOldReferences=function returnOldReferences(){cartContent=JSON.parse(sessionStorage.getItem('cart-content'));};sessionStorage.getItem('cart-content')?returnOldReferences():returnNewReferences();return cartContent;};","map":{"version":3,"sources":["C:/Users/Nautilus/Desktop/Nico/Rafaela/my-app/client/src/elements/cartContent.js"],"names":["React","TotalAmountContext","createContext","carterTotalAmount","setTotalAmount","CartContentContext","cartContent","setCartContent","refGenerator","randoms","i","findCoincidence","newRandom","Math","round","random","coincidenceFound","find","el","e","console","log","values","createCartContentObject","keys","newEntries","map","key","newObject","Object","fromEntries","getCartContent","returnNewReferences","references","sessionStorage","setItem","JSON","stringify","returnOldReferences","parse","getItem"],"mappings":"2IAAA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CAEA,MAAO,IAAMC,CAAAA,kBAAkB,cAAGD,KAAK,CAACE,aAAN,CAAoB,CAClDC,iBAAiB,CAAE,EAD+B,CAElDC,cAAc,CAAE,yBAAM,CAAG,CAFyB,CAApB,CAA3B,CAKP,MAAO,IAAMC,CAAAA,kBAAkB,cAAGL,KAAK,CAACE,aAAN,CAAoB,CAClDI,WAAW,CAAE,EADqC,CAElDC,cAAc,CAAE,yBAAM,CAAG,CAFyB,CAApB,CAA3B,CAKP,GAAMC,CAAAA,YAAY,CAAG,QAAfA,CAAAA,YAAe,EAAM,CACvB,GAAIC,CAAAA,OAAO,CAAG,EAAd,CADuB,yBAEdC,CAFc,EAGnB,QAASC,CAAAA,eAAT,EAA2B,CACvB,GAAMC,CAAAA,SAAS,CAAGC,IAAI,CAACC,KAAL,CAAW,QAAU,GAAV,CAAgBD,IAAI,CAACE,MAAL,EAA3B,CAAlB,CACA,GAAMC,CAAAA,gBAAgB,CAAGP,OAAO,CAACQ,IAAR,CAAa,SAAAC,EAAE,QAAIA,CAAAA,EAAE,GAAKN,SAAX,EAAf,CAAzB,CACA,GAAI,CACA,MAAOI,CAAAA,gBAAP,EAA2B,WAA3B,CACIL,eAAe,EADnB,CACwBF,OAAO,8BAAOA,OAAP,GAAgBG,SAAhB,EAD/B,CAEH,CAAC,MAAOO,CAAP,CAAU,CACRC,OAAO,CAACC,GAAR,CAAY,WAAZ,EACAD,OAAO,CAACC,GAAR,CAAYF,CAAZ,EACH,CACJ,CACDR,eAAe,GAdI,EAEvB,IAAK,GAAID,CAAAA,CAAC,CAAG,CAAb,CAAgBA,CAAC,CAAG,EAApB,CAAwBA,CAAC,EAAzB,CAA6B,OAApBA,CAAoB,EAa5B,CACD,GAAMY,CAAAA,MAAM,CAAGb,OAAf,CACA,MAAOa,CAAAA,MAAP,CACH,CAlBD,CAoBA,MAAO,IAAMC,CAAAA,uBAAuB,CAAG,QAA1BA,CAAAA,uBAA0B,CAACC,IAAD,CAAU,CAC7C,GAAMC,CAAAA,UAAU,CAAGD,IAAI,CAACE,GAAL,CAAS,SAACC,GAAD,QAAS,CAACA,GAAD,CAAM,CAAN,CAAT,EAAT,CAAnB,CACA,GAAMC,CAAAA,SAAS,CAAGC,MAAM,CAACC,WAAP,CAAmBL,UAAnB,CAAlB,CACA,MAAOG,CAAAA,SAAP,CACH,CAJM,CAMP,MAAO,IAAMG,CAAAA,cAAc,CAAG,QAAjBA,CAAAA,cAAiB,EAAM,CAChC,GAAIzB,CAAAA,WAAW,CAAG,EAAlB,CACA,GAAM0B,CAAAA,mBAAmB,CAAG,QAAtBA,CAAAA,mBAAsB,EAAM,CAC9B,GAAMC,CAAAA,UAAU,CAAGzB,YAAY,EAA/B,CACAF,WAAW,CAAGiB,uBAAuB,CAACU,UAAD,CAArC,CACAC,cAAc,CAACC,OAAf,CAAuB,cAAvB,CAAuCC,IAAI,CAACC,SAAL,CAAe/B,WAAf,CAAvC,EACH,CAJD,CAKA,GAAMgC,CAAAA,mBAAmB,CAAG,QAAtBA,CAAAA,mBAAsB,EAAM,CAC9BhC,WAAW,CAAG8B,IAAI,CAACG,KAAL,CAAWL,cAAc,CAACM,OAAf,CAAuB,cAAvB,CAAX,CAAd,CACH,CAFD,CAGAN,cAAc,CAACM,OAAf,CAAuB,cAAvB,EACIF,mBAAmB,EADvB,CAEIN,mBAAmB,EAFvB,CAGA,MAAO1B,CAAAA,WAAP,CACH,CAdM","sourcesContent":["import React from 'react';\r\n\r\nexport const TotalAmountContext = React.createContext({\r\n    carterTotalAmount: '',\r\n    setTotalAmount: () => { }\r\n});\r\n\r\nexport const CartContentContext = React.createContext({\r\n    cartContent: '',\r\n    setCartContent: () => { }\r\n});\r\n\r\nconst refGenerator = () => {\r\n    let randoms = [];\r\n    for (let i = 0; i < 10; i++) {\r\n        function findCoincidence() {\r\n            const newRandom = Math.round(1008000 * 132 * Math.random());\r\n            const coincidenceFound = randoms.find(el => el === newRandom);\r\n            try {\r\n                typeof coincidenceFound != 'undefined' ?\r\n                    findCoincidence() : randoms = [...randoms, newRandom];\r\n            } catch (e) {\r\n                console.log('Error GH1')\r\n                console.log(e);\r\n            }\r\n        }\r\n        findCoincidence();\r\n    }\r\n    const values = randoms;\r\n    return values;\r\n}\r\n\r\nexport const createCartContentObject = (keys) => {\r\n    const newEntries = keys.map((key) => [key, 0]);\r\n    const newObject = Object.fromEntries(newEntries);\r\n    return newObject;\r\n}\r\n\r\nexport const getCartContent = () => {\r\n    let cartContent = {};\r\n    const returnNewReferences = () => {\r\n        const references = refGenerator();\r\n        cartContent = createCartContentObject(references);\r\n        sessionStorage.setItem('cart-content', JSON.stringify(cartContent));\r\n    }\r\n    const returnOldReferences = () => {\r\n        cartContent = JSON.parse(sessionStorage.getItem('cart-content'));\r\n    }\r\n    sessionStorage.getItem('cart-content') ?\r\n        returnOldReferences() :\r\n        returnNewReferences();\r\n    return cartContent;\r\n}\r\n"]},"metadata":{},"sourceType":"module"}